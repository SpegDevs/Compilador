dec -> DEC
x1 -> IDENTIFIER
; -> SEMICOLON
dec -> DEC
x2 -> IDENTIFIER
; -> SEMICOLON
call -> CALL
( -> L_PARENTHESIS
out -> OUT
( -> L_PARENTHESIS
"Ingrese un numero: " -> STRING
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
x1 -> IDENTIFIER
= -> EQUAL
call -> CALL
( -> L_PARENTHESIS
inDec -> IN_DEC
( -> L_PARENTHESIS
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
call -> CALL
( -> L_PARENTHESIS
out -> OUT
( -> L_PARENTHESIS
"Ingrese otro numero: " -> STRING
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
x2 -> IDENTIFIER
= -> EQUAL
call -> CALL
( -> L_PARENTHESIS
inDec -> IN_DEC
( -> L_PARENTHESIS
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
if -> IF
( -> L_PARENTHESIS
x1 -> IDENTIFIER
== -> EQUAL_EQUAL
x2 -> IDENTIFIER
) -> R_PARENTHESIS
{ -> L_BRACE
call -> CALL
( -> L_PARENTHESIS
out -> OUT
( -> L_PARENTHESIS
"Son iguales" -> STRING
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
} -> R_BRACE
ifnot -> IFNOT
( -> L_PARENTHESIS
x1 -> IDENTIFIER
== -> EQUAL_EQUAL
x2 -> IDENTIFIER
) -> R_PARENTHESIS
{ -> L_BRACE
call -> CALL
( -> L_PARENTHESIS
out -> OUT
( -> L_PARENTHESIS
"No son iguales" -> STRING
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
} -> R_BRACE
