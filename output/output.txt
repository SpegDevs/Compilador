arr -> ARRAY
[ -> L_BRACKET
int -> INT
, -> COLON
5 -> INTEGER
] -> R_BRACKET
a -> IDENTIFIER
; -> SEMICOLON
int -> INT
x -> IDENTIFIER
; -> SEMICOLON
int -> INT
i -> IDENTIFIER
; -> SEMICOLON
function -> FUNCTION
int -> INT
suma -> IDENTIFIER
( -> L_PARENTHESIS
int -> INT
n -> IDENTIFIER
) -> R_PARENTHESIS
{ -> L_BRACE
int -> INT
r -> IDENTIFIER
; -> SEMICOLON
if -> IF
( -> L_PARENTHESIS
n -> IDENTIFIER
== -> EQUAL_EQUAL
0 -> INTEGER
) -> R_PARENTHESIS
{ -> L_BRACE
r -> IDENTIFIER
= -> EQUAL
0 -> INTEGER
; -> SEMICOLON
} -> R_BRACE
ifnot -> IFNOT
{ -> L_BRACE
r -> IDENTIFIER
= -> EQUAL
a -> IDENTIFIER
[ -> L_BRACKET
n -> IDENTIFIER
- -> MINUS
1 -> INTEGER
] -> R_BRACKET
+ -> PLUS
call -> CALL
( -> L_PARENTHESIS
suma -> IDENTIFIER
( -> L_PARENTHESIS
n -> IDENTIFIER
- -> MINUS
1 -> INTEGER
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
} -> R_BRACE
ret -> RETURN
r -> IDENTIFIER
; -> SEMICOLON
} -> R_BRACE
i -> IDENTIFIER
= -> EQUAL
0 -> INTEGER
; -> SEMICOLON
while -> WHILE
( -> L_PARENTHESIS
i -> IDENTIFIER
< -> LESS_THAN
5 -> INTEGER
) -> R_PARENTHESIS
{ -> L_BRACE
a -> IDENTIFIER
[ -> L_BRACKET
i -> IDENTIFIER
] -> R_BRACKET
= -> EQUAL
i -> IDENTIFIER
+ -> PLUS
1 -> INTEGER
; -> SEMICOLON
i -> IDENTIFIER
= -> EQUAL
i -> IDENTIFIER
+ -> PLUS
1 -> INTEGER
; -> SEMICOLON
} -> R_BRACE
x -> IDENTIFIER
= -> EQUAL
call -> CALL
( -> L_PARENTHESIS
suma -> IDENTIFIER
( -> L_PARENTHESIS
5 -> INTEGER
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
x -> IDENTIFIER
= -> EQUAL
5 -> INTEGER
+ -> PLUS
7.8 -> DECIMAL
; -> SEMICOLON
call -> CALL
( -> L_PARENTHESIS
out -> OUT
( -> L_PARENTHESIS
x -> IDENTIFIER
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
