int -> INT
x -> IDENTIFIER
, -> COLON
y -> IDENTIFIER
; -> SEMICOLON
x -> IDENTIFIER
= -> EQUAL
2 -> INTEGER
* -> MULTIPLICATION
( -> L_PARENTHESIS
5 -> INTEGER
+ -> PLUS
y -> IDENTIFIER
* -> MULTIPLICATION
( -> L_PARENTHESIS
10 -> INTEGER
+ -> PLUS
y -> IDENTIFIER
) -> R_PARENTHESIS
) -> R_PARENTHESIS
; -> SEMICOLON
if -> IF
( -> L_PARENTHESIS
x -> IDENTIFIER
< -> LESS_THAN
5 -> INTEGER
) -> R_PARENTHESIS
{ -> L_BRACE
int -> INT
z -> IDENTIFIER
; -> SEMICOLON
z -> IDENTIFIER
= -> EQUAL
4 -> INTEGER
; -> SEMICOLON
x -> IDENTIFIER
= -> EQUAL
3 -> INTEGER
; -> SEMICOLON
} -> R_BRACE
ifnot -> IFNOT
( -> L_PARENTHESIS
x -> IDENTIFIER
== -> EQUAL_EQUAL
5 -> INTEGER
) -> R_PARENTHESIS
{ -> L_BRACE
} -> R_BRACE
else -> ELSE
{ -> L_BRACE
int -> INT
y -> IDENTIFIER
; -> SEMICOLON
} -> R_BRACE
int -> INT
i -> IDENTIFIER
; -> SEMICOLON
for -> FOR
( -> L_PARENTHESIS
i -> IDENTIFIER
= -> EQUAL
0 -> INTEGER
; -> SEMICOLON
i -> IDENTIFIER
< -> LESS_THAN
5 -> INTEGER
; -> SEMICOLON
i -> IDENTIFIER
= -> EQUAL
i -> IDENTIFIER
+ -> PLUS
1 -> INTEGER
) -> R_PARENTHESIS
{ -> L_BRACE
int -> INT
z -> IDENTIFIER
; -> SEMICOLON
z -> IDENTIFIER
= -> EQUAL
z -> IDENTIFIER
+ -> PLUS
y -> IDENTIFIER
; -> SEMICOLON
} -> R_BRACE
while -> WHILE
( -> L_PARENTHESIS
x -> IDENTIFIER
!= -> NOT_EQUAL
4 -> INTEGER
) -> R_PARENTHESIS
{ -> L_BRACE
int -> INT
abc -> IDENTIFIER
; -> SEMICOLON
abc -> IDENTIFIER
= -> EQUAL
5 -> INTEGER
* -> MULTIPLICATION
x -> IDENTIFIER
; -> SEMICOLON
} -> R_BRACE
do -> DO
{ -> L_BRACE
x -> IDENTIFIER
= -> EQUAL
x -> IDENTIFIER
+ -> PLUS
1 -> INTEGER
; -> SEMICOLON
} -> R_BRACE
while -> WHILE
( -> L_PARENTHESIS
x -> IDENTIFIER
< -> LESS_THAN
20 -> INTEGER
) -> R_PARENTHESIS
. -> POINT
